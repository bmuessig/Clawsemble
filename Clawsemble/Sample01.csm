.CWX:16
.exi helloworld,129,ARGTYPE_STRING,ARGTYPE_ARRAY


																; required, MUST be first directive in every file,
				; CWX = executable, CWL = library; 16 = 16 bit executable, 32 bit, 64 bit
				; everything's case insensitive

				; this metadata is optional and will be imported into the executable
.TITLE			"Sample program"
.AUTHOR			"muessigb"
.COPYRIGHT		"(c) 2016 muessigb"

; #err (-10 -10 - -5)

; (0/0)

;$12345678

; this shouldnt work as it's reserved
;#define lc 123

#define test        124
#define test_1      $ffd00
#define test___2    'f'
#def felix_the_hero (((567*-9345)*(-98/7))/34*86+(-32*4)%5*37)

#undefine test___2

#def sign (-10 + 23 + -19 - 15 + +25 - 23 - -15)
#def sign_par (-10 + 23 + (-19) - 15 + (+25) - 23 - (-15))
#def sign_sol (-10 + 23 - 19 - 15 + 25 - 23 + 15)

; #err "Sample error" ; activate to trigger a intentional preprocessor error
; #err ("Unsolved: " + sign + ", Parantheses: " + sign_par + ", Solved: " + sign_sol) ; activate to trigger another preproc error
; yes, preprocessor allows adding strings together :)

				; this metadata is required and has to be present
.VERSION		0,2		; version expects an array of major and minor version

;.db testvar	$2d			; this defines a new constant testvar as $2d

.sym main				; main function, required
	lc  		42			; load the constant 42 onto the stack
	lc 		testvar			; load the constant from testvar onto the stack
	addc		1034			; add 1034 to the value of testvar
	ca		test:0			; call function test, the :0 is optional and specifies the module number

.sym test:1				; the :1 is optional and specifies the function index but is required for libraries and callbacks
	ld			1		; load the 42 from earlier
	mul					; multiplies the sum from earlier with 42
	ret					; ret at the end of symbols is totally optional

.sym expr_test:(23+5)
	ld		(233345 & (1 << 4))
	mulc		(-25 + 26 + (-25))

